* Chapter 1: Anything From Almost Nothing
** 1.6 Multiple Arugments

There's an expression in here:

(λx(λy.xy))(λz.a) 1

Which I would expect to look like:

(λx.(λy.xy))(λz.a) 1

Especially given that in earlier parts of this section, there is a dot
in that location.

Why was the dot omitted?
* Chapter 2: Basic Expressions and Functions
- The syntax for indentation was introduced, but not for
  semicolons. What's the deal with them?

** Exercises with Let and where
I'm confused about what they're asking from us. Where clauses are not
expressions, so we can't translate these directly without doing some
sort of binding.

What did other people come up with?

* Chapter 3: String
** Types of concatenation functions
Prelude> :type (++)
(++) :: [a] -> [a] -> [a]
Prelude> :type concat
concat :: Foldable t => t [a] -> [a]

But the book says:
#+BEGIN_SRC haskell
concat :: [[a]] -> [a]
#+END_SRC

I guess the book does explain this.

** Concatenation and scoping
- Can we talk about "right associativity"?

** Building functions
- Lets talk about exercise 5. I want to see others implementations

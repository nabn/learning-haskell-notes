* Chapter 1: Anything From Almost Nothing
** 1.6 Multiple Arugments

There's an expression in here:

(λx(λy.xy))(λz.a) 1

Which I would expect to look like:

(λx.(λy.xy))(λz.a) 1

Especially given that in earlier parts of this section, there is a dot
in that location.

Why was the dot omitted?
* Chapter 2: Basic Expressions and Functions
- The syntax for indentation was introduced, but not for
  semicolons. What's the deal with them?

** Exercises with Let and where
I'm confused about what they're asking from us. Where clauses are not
expressions, so we can't translate these directly without doing some
sort of binding.

What did other people come up with?

* Chapter 3: String
** Types of concatenation functions
Prelude> :type (++)
(++) :: [a] -> [a] -> [a]
Prelude> :type concat
concat :: Foldable t => t [a] -> [a]

But the book says:
#+BEGIN_SRC haskell
concat :: [[a]] -> [a]
#+END_SRC

I guess the book does explain this.

** Concatenation and scoping
- Can we talk about "right associativity"?

** Building functions
- Lets talk about exercise 5. I want to see others implementations (pg 115)

* Chapter 4: Basic Types

Let's talk about indentation
* Chapter 5: Types
- "Thinking about types as being like sets will help guide your
  intuition on what types are and how they work in a mathematical
  sense" pg 145.
  - How?
- pg 149 talks about the info of (->) can we break this down?
  - It's a "type constructor for functions"
  - _I think_:
    - It's infix, with low precedence
    - and right associative
- pg 161 "Currying and uncurring functions of three or more arugments
  automatically is quite possible but trickier"
  - Want to try?
- pg 161 - 164 -- Maybe go through these quickly?
- pg 166 "A subclass cannot override the methods of its superclass"
  - Really? Why?
- pg 167 These are pretty cool questions
- pg 175, question 3, What is the answer? I said (b)
- pg 179, question 6, Let's do this
- pg 183 Principle types. Lets talk about what they are
- What is the type of the empty list?
  - Like, is it [a]?
- pg 185. Let's talk about the difference between parametric and
  ad-hoc polymorphism. Especially in regards to these definitions.
* Chapter 6: Typeclasses
** Pages/questions from version 0.11.2

- pg 188: Lets talk about the expression problem
- pg 188: What does it mean for typclasses to "dispatch on type"
- General: Talk about "Implements" vs "Has instances for"
- pg 194: "Since Real cannot override the methods of Num, this
  typeclass inheritance is _only_ additive and the ambiguity problems
  caused by multiple inheritance in some programming languages is
  avoided."
- pg 196: Why don't we need to constrain by Fractional _and_ Num?
- General: What do the lines in ~:info Typeclass~ that look like:

      {-# MINIMAL compare | (<=) #-}

  mean?
- pg 207: Talk about IO (), specifically, why main has to be IO ().
  - Also "An IO action that returns ()"
- pg 210: ""

** Pages/questions from version 0.12.0
- pg 179: Can we walk through a couple of these?
  - Specifically 2, 5, 6
  - Very specifically: 5. I don't think I got this one right.

- pg 200: Can we unpack the language in the first few paragraphs of
  6.12? Namely "instances"

- I want to talk about dispatching on type as well.

- pg 208
  - Exercise 1, can we make it typecheck?
  - Exercise 3.b. Can we walk through this error?

- General: What's with data definitions like:
  ~data MyThing = Thing Integer~? Will we cover these later?

- 209: Exercise 4. This totally typechecks. Talk about Data
  constructor partial application?

- pg 210: Exercise 1. Why???? I would think you could be more general...
  - This seems like a trick based on something we haven't learned yet,
    and less about typeclasses.
* Chapter 7: More Functional Patterns
- pg 223: In
    : (\x -> x * 3) :: Integer -> Integer
  Are the two uses of (->) the same, on the left and right side of ::?

- pg 224: Exercise 1. They produce the same effect, but the method of
  curring is different, right? Actually, I just tested this in the repl:

  #+BEGIN_SRC haskell
  -- using (++) makes it clearer
  (\x -> \y -> \z -> x ++ y ++ z)
  mTh x y z = x ++ y ++ z
  #+END_SRC

  I guess it just binds the leftmost arguments first. Which I guess
  makes sense.

- pg 225: Any and all data constructors!!!

- pg 239: talk about explicit parenthetization of type signatures

- pg 251: Question 5. I don't understand

- General: Is there such thing as exponent types??

- pg 261: Question 1.a) Does divMod make this simpler? I don't think I
  got the right answer.

- pg 263: Question 6: lets talk about this
* Chapter 8: Recursion

- pg 277: Recursion is self-referntial composition. What does that mean?

- pg: 280: "Bottom is used in haskell to refer to computations that do
  not successfully return a value." So bottom is not itself a value?
  What does it mean to refer to a "computation" in this sense?

- pg 292: Recursion question 2. We talk about partial functions being
  bad, but we're writing them for exercises like this. Is that
  something we should be concerned about?
  - Or at least, it is "bottom" when given a negative argument, or
    floating point argument.
* Chapter 9: Lists
- pg 302: What is a spine? What is a cons cell?
- pg 315: No really, what is a "spine"?
- pg 317: "The length function is only strict in the spine"
  - What does this mean?
- pg 317: "Values in Haskell get reduced to weak head normal form by
  default"
  - What?
- pg 319: If a range isn't evaulated, what is it? How does it know
  where to stop?
- pg 341: Is there any difference between the builtin list and the
  custom definition other than syntax?
* Chapter 10: Folding Lists
- pg 346: "Also, each of them has a main function with a recursive
  pattern that associates to the right". Can we map this out?
- pg 347: can we walk through this definition, in light of right
  associativity.
- pg 353: I don't understand, given the definition of fold, how the
  examples with undefined do not end up evaluated
- pg 355: Let's go over left associativity. What is an example when
  you would want this?

* Chapter 11: Algebraic datatypes
- pg 386: Are there "kinds of kinds"? Sorts?
- pg 386: what does it mean for a kind to be "fully applied"?
- ** Are the only "kinds" fully applied vs waiting for application?
  - rust has "lifetimes" see http://smallcultfollowing.com/babysteps/blog/2016/11/04/associated-type-constructors-part-3-what-higher-kinded-types-might-look-like/#time-to-get-a-bit-more-formal
- pg 388: Any uses for "phantom" types?
- pg 390: "types resolve at compile time" no introspection
  capabilities at all?
- ** pg 397: Can we talk about cardinality/types/sets here?
  - is (Int, Int) higher cardinality than (Int)?
  - In math it wouldn't be
- pg 398: what is that min/max bound syntax??
- ** Can we make a list of what an algebra requires
  - identity function?
  - sum?
  - product?
- pg 403: what would the definition with a type synonym look
- When would you ever use type synonyms over ~newtype~?
- pg 404: exercise (1), what? Can we go over this?
  - Actually, I kinda get this, ~(Int, String)~ is a single type though?
- pg 404: exercise (3) can we go over this?
  - illegal datatype context
  - see http://stackoverflow.com/questions/18934882/haskell-line-of-code-not-compiling-illegal-datatype-context
- pg 409: "the cardinality of a datatype roughly equates to how difficult it is
  to reason about" -- discuss
- ** Can we draw out all the ways to define new types? And talk about them?
- ** pg 412: Why describe something as "Normal form" in this context?
- pg 412: I don't understand how this second Author definition works
- pg 413: Did I get this answer right?
- pg 423: Exercise Programmers I used list comprehensions, what did others use?
- pg 428: Exponential == enumerating all possible implementations of a function
- pg 444: We could write foldr for binary trees
* Chapter 12: Signalling Adversity
- pg 459: I don't understand the functor thing. Can we talk about what
  it means "Functor will not map over the left type argument because
  it has been applied away"?
- pg 464: Lifted vs unlifted. What is an example of an unlifted type in haskell?
- pg 471: determine the kinds (1) and (2), what are the answers?
- pg 478: Is my better iterate better?
* Chapter 13: Building Projects
- Can you use stack offline? Like, if I already have a version of
  haskell installed, does it really need to download something?
* Chapter 14: Testing
- pg 534: "If we had not asserted the type of x in the property test,
  the compiler would not have known what concrete type to use"
  - Why does the compiler need to know this?
- pg 535: "When you use the arbitrary value, you have to specify the
  type to dispatch the right typeclass instance, as types and
  typeclasses instance form unique pairings"
  - What does this mean?
- pg 536: How the fuck does this arbitrary typecasting shit work???
  - It does say it's MAGIC, but like, wow
- pg 552: Can we talk about the types of properties and whatnot?
- pg 554: Can we go through these ~Arbitrary~ typeclass implementations
- pg 561: How do you organize these tests?

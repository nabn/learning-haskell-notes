* Chapter 1: Anything From Almost Nothing
** 1.6 Multiple Arugments

There's an expression in here:

(λx(λy.xy))(λz.a) 1

Which I would expect to look like:

(λx.(λy.xy))(λz.a) 1

Especially given that in earlier parts of this section, there is a dot
in that location.

Why was the dot omitted?
* Chapter 2: Basic Expressions and Functions
- The syntax for indentation was introduced, but not for
  semicolons. What's the deal with them?

** Exercises with Let and where
I'm confused about what they're asking from us. Where clauses are not
expressions, so we can't translate these directly without doing some
sort of binding.

What did other people come up with?

* Chapter 3: String
** Types of concatenation functions
Prelude> :type (++)
(++) :: [a] -> [a] -> [a]
Prelude> :type concat
concat :: Foldable t => t [a] -> [a]

But the book says:
#+BEGIN_SRC haskell
concat :: [[a]] -> [a]
#+END_SRC

I guess the book does explain this.

** Concatenation and scoping
- Can we talk about "right associativity"?

** Building functions
- Lets talk about exercise 5. I want to see others implementations (pg 115)

* Chapter 4: Basic Types

Let's talk about indentation
* Chapter 5: Types
- "Thinking about types as being like sets will help guide your
  intuition on what types are and how they work in a mathematical
  sense" pg 145.
  - How?
- pg 149 talks about the info of (->) can we break this down?
  - It's a "type constructor for functions"
  - _I think_:
    - It's infix, with low precedence
    - and right associative
- pg 161 "Currying and uncurring functions of three or more arugments
  automatically is quite possible but trickier"
  - Want to try?
- pg 161 - 164 -- Maybe go through these quickly?
- pg 166 "A subclass cannot override the methods of its superclass"
  - Really? Why?
- pg 167 These are pretty cool questions
- pg 175, question 3, What is the answer? I said (b)
- pg 179, question 6, Let's do this
- pg 183 Principle types. Lets talk about what they are
- What is the type of the empty list?
  - Like, is it [a]?
- pg 185. Let's talk about the difference between parametric and
  ad-hoc polymorphism. Especially in regards to these definitions.
* Chapter 6: Typeclasses
- pg 188 Lets talk about the expression problem
- pg 188 What does it mean for typclasses to "dispatch on type"

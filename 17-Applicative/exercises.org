* Lookups

In the following exercises, use the following terms to make the
expressions type-check:

1. ~pure~
2. ~(<$>)~ or ~fmap~
3. ~(<*>)~

Make the following expressions typecheck

#+BEGIN_SRC haskell
import Data.List (elemIndex)

-- 1
added :: Maybe Integer
added = fmap (+3) (lookup 3 $ zip [1, 2, 3] [4, 5, 6])

-- 2
y :: Maybe Integer
y = lookup 3 $ zip [1, 2, 3] [4, 5, 6]

z :: Maybe Integer
z = lookup 2 $ zip [1, 2, 3] [4, 5, 6]

tupled :: Maybe (Integer, Integer)
tupled = fmap (,) y <*> z

-- 3
x :: Maybe Int
x = elemIndex 3 [1, 2, 3, 4, 5]

y :: Maybe Int
y = elemIndex 4 [1, 2, 3, 4, 5]

max' :: Int -> Int -> Int
max' = max

maxed :: Maybe Int
maxed = pure max' <*> x <*> y

-- 4
xs = [1, 2, 3]
ys = [4, 5, 6]

x :: Maybe Integer
x = lookup 3 $ zip xs ys

y :: Maybe Integer
y = lookup 2 $ zip xs ys

summed :: Maybe Integer
summed = fmap sum $ fmap (,) x <*> y
#+END_SRC

* Identity Instance

Write an ~Applicative~ instance for ~Identity~.

#+BEGIN_SRC haskell
newtype Identity a = Identity a deriving (Eq, Ord, Show)

instance Functor Identity where
  fmap f (Identity x) = Identity $ f x

instance Applicative Identity where
  pure = Identity
  (<*>) (Identity f) (Identity x) = Identity $ f x
#+END_SRC

* Constant Instance

Write an ~Applicative~ instance for ~Constant~

#+BEGIN_SRC haskell
newtype Constant a b =
  Constant { getConstant :: a }
  deriving (Eq, Ord, Show)

instance Functor (Constant a) where
  fmap f (Constant x) = (Constant x)

instance Monoid a => Applicative (Constant a) where
  pure _ = Constant mempty
  (<*>) (Constant x) (Constant y) = Constant (mappend x y)
#+END_SRC

* Fixer Upper

Given the function and values provided, use ~(<$>)~ from ~Functor~ and
~(<*>)~ and ~pure~ from the ~Applicative~ typeclass to fill in missing
bits of the broken code to make it work.

#+BEGIN_SRC haskell
-- 1
const <$> Just "Hello" <*> pure "World"

-- 2
(,,,) <$> (Just 90) <*> Just 10 <*> Just "Tierness" <*> pure [1, 2, 3]
#+END_SRC

* List Applicative Exercise

Implement the List Applicative. Writing a minimally complete
Applicative instance calls for writing the definitions of both ~pure~
and ~<*>~. Use the Checkers library to validate your ~Applicative~
instance.

See ~Sandbox/src/exercises/17-list-applicative.hs

* ZipList Applicative Exercise

Implement the ZipList Applicative. Use the ~checkers~ library to
validate your Applicative instance. We're going to provide the
~EqProp~ instance and explain the weirdness in a moment.

** TODO Actually complete this exercise

Will be located at ~Sandbox/src/exercises/17-ZipList-applicative.hs

* Variations on Either

~Validation~ has the same representation as ~Either~. It's ~Functor~
instance will behave the same, but the ~Applicative~ will be
different. Write the instance and use the ~checkers~ library to check
it.
** TODO Actually complete this exercise

Will be located at ~Sandbox/src/exercises/17-Validation-applicative.hs

* Chapter Exercises

** Specializing method types

Given a type that has an instance of Applicative, specialize the types
of the methods.

1. ~[]~

#+BEGIN_SRC haskell
pure :: a -> [a]
(<*>) :: [(a -> b)] -> [a] -> [b]
#+END_SRC

2. ~IO~

#+BEGIN_SRC haskell
pure :: a -> IO a
(<*>) :: IO (a -> b) -> IO a -> IO b
#+END_SRC

3. ~(,) a~

#+BEGIN_SRC haskell
pure :: a -> (a, a)
(<*>) :: (a, (a -> b)) -> (a, a) -> (a, b)
#+END_SRC

4. ~(->) e~

#+BEGIN_SRC haskell
pure :: a -> (e -> a)
(<*>) :: (e -> (a -> b)) -> (e -> a) -> (e -> b)
#+END_SRC


** Writing Applicative Instances

Write applicative instances for the following datatypes. Use
~checkers~ to validate.

These will all be implemented in
~Sandbox/src/exercises/17-chapter-exercises.hs~.

** Combinations

Remember the vowels and stops chapter exercise in folds? Write the
function to generate the possible combinations of three input lists
using ~liftA3~ from ~Control.Applicative~.

That is, list all possible combinations of stop-vowel-stop.

#+BEGIN_SRC haskell
import Control.Applicative (liftA3)

stops :: String
stops = "pbtdkg"

vowels :: String
vowels = "aeiou"

combos :: [a] -> [b] -> [c] -> [(a, b, c)]
combos = liftA3 (,,) stops vowels stops
#+END_SRC

* 14.1 Testing

We'll be covering two testing libraries for Haskell, including how and
when to use them. This chapter will cover.

- The whats and whys of testing
- using the testing libraries Hspec and QuickCheck
- a bit of fun with Morse code

* 14.2 A quick tour of testing for the uninitiated

We expect the compiler to tell us if our code is well formed. However
it is still possible to write well-typed code that doesn't perform as
expected.

Tests allow you to state an expectation and verify the result of an
operation meets the expectation.

We'll say there are two broad types of testing:

- unit testing :: test the smallest atomic units of software
                  independent of one another.
- property testing :: tests the formal properties of programs without
     requiring formal proofs.

With unit testing you make assertions about individual inputs and
outputs. With property testing you make universally quantified
functions, to be checked against randomly generated inputs.

- QuickCheck :: A haskell library to intelligently run property tests,
                including generating input to cover common edge cases.

Property testing is only useful when there are assertable truth-valued
properties of the software, which is not always the case.

* 14.3 Conventional testing

We've set up a project in ~./TestingPackage~ (relative to this chapter
notes file) that we'll be using to write some tests.

Hspec documentation can be found at [[http://hspec.github.io]].

Hspec tests look like:

#+BEGIN_SRC haskell
main = hspec $ do
  describe "Addition" $ do
    it "1 + 1 is greater than 1" $ do
      (1 + 1) > 1 `shouldBe` True
#+END_SRC

That is, they look a lot like old style Rspec tests. For more
complicated examples, refer to the documentation.

* 14.4 Enter QuickCheck

QuickCheck is the first library that offered "property checking".

These tests can be used in the same framework as hspec tests. A simple
example that tests that adding 1 to x is always greater than x:

#+BEGIN_SRC haskell
main = hspec $ do
  describe "Addition" $ do
    it "1 + x is always greater than x" $ do
      property $ \x -> x + 1 > (x :: Int)
#+END_SRC

** Arbitrary instances

QuickCheck relies on a typeclass called ~Arbitrary~ and a newtype
called ~Gen~ for generating its random data. There is also a value,
~arbitrary~ which is of type ~Gen~.

    : > :t arbitrary
    : arbitrary :: Arbitrary a => Gen a

We can use ~sample~ and ~sample'~ to print and return values. We use
it like this:

    : sample (arbitrary :: Gen Int)
    : sample' (arbitrary :: Gen Double)

We can build our own data for generating ~Gen~ values

#+BEGIN_SRC haskell
trivialInt :: Gen Int
trivialInt = return 1
#+END_SRC

We may remember ~return~ from previous chapters, where it was used to
put things inside the ~IO~ monad. It can be used to put things inside
any monad though, so here we use it to put the 1 inside ~Gen~.

We can use the ~elements~ and ~choose~ functions to make more
interesting generators:

#+BEGIN_SRC haskell
oneThroughThree :: GenInt
oneThroughThree = elements [1, 2, 3]

genBool :: Gen Bool
genBool = choose (False, True)

genChar :: Gen Char
genChar = elements ['a'..'z']
#+END_SRC

We can also do more complex things

#+BEGIN_SRC haskell
genTuple :: (Arbitrary a, Arbitrary b) => Gen (a, b)
genTuple = do
  a <- arbitrary
  b <- arbitrary
  return (a, b)
#+END_SRC

Which lets us (somehow) do:

    : > sample (genTuple :: Gen (Int, Float))

Or for other types:

#+BEGIN_SRC haskell
genEither :: (Arbitrary a, Arbitrary b) => Gen (Either a b)
genEither = do
  a <- arbitrary
  b <- arbitrary
  elements [Left a, Right b]
#+END_SRC

Which can then be used as follows:

    : > sample (genEither :: Gen (Either String Int))

For all of the above, we can create anything arbitrarily, Lists,
characters, string, etc, so long as they have an instance of the
~Arbitrary~ typeclass. See ~:info Arbitrary~ for a list.

** Using QuickCheck without Hspec

#+BEGIN_SRC haskell
prop_additionGreater :: Int -> Bool
prop_additionGreater x = x + 1 > x

runQc :: IO ()
runQc = quickcheck prop_additionGreater
#+END_SRC

* 14.5 Morse Code

We'll set up a library the contains a mapping of characters to morse
code, and some functions to translate between the two.

We'll also set up an executable with some code that takes care of
doing translation.

Finally, in the test directory, we'll include a test module, with a
corresponding declaration in morse.cabal, which will run our tests.

All of this code can be found in the Morse project directory adjecent
to these chapter notes.

** Notes on stack

We can load a specific module/thing from our cabal file with stack
ghci. For example if we wanted to load the tests module:

    : stack ghci morse:Morse-test

Where ~Morse-test~ is one of the sections defined in our
~morse.cabal~.

Additionally, if we have a ~test-suite~ directive defined in our cabal
file, we can run the test suite with

    : stack test

* 14.6 Kicking around QuickCheck

In order to make QuickCheck work for us, we need to be able to write
instances of the ~Arbitrary~ typeclass for our datatypes.

An example of a trivial implementation:

#+BEGIN_SRC haskell
import Test.QuickCheck

data Trivial = Trivial deriving (Eq, Show)

trivialGen :: Gen Trivial
trivialGen = return Trivial

instance Arbitrary Trivial where
  arbitrary = trivialGen
#+END_SRC

A slightly more complex example:

#+BEGIN_SRC haskell
data Identity a = Identity a deriving (Eq, Show)

identityGen :: Arbitrary a => Gen (Identity a)
identityGen = do
  a <- arbitrary
  return (Identity a)

instance Arbitrary a => Arbitrary (Identity a) where
  arbitrary = identityGen

identityGenInt :: Gen (Identity Int)
identityGenInt = identityGen
#+END_SRC

Given these examples we can run some stuff:

#+BEGIN_SRC haskell
-- Get some (Identity Int) values:
sample identityGenInt

-- Get some (Identity Char) values:
sample (identityGen :: Gen (Identity Float))
#+END_SRC

** Arbitrary Products

Defining product types is a fairly straightforward extension:

#+BEGIN_SRC haskell
data Pair a b = Pair a b deriving (Eq, Show)

pairGen :: (Arbitrary a, Arbitrary b) => Gen (Pair a b)
pairGen = do
  a <- arbitrary
  b <- arbitrary
  return (Pair a b)

instance (Arbitrary a, Arbitrary b) => Arbitrary (Pair a b) where
  arbitrary = pairGen

pairGenIntString :: Gen (Pair Int String)
pairGenIntString = pairGen
#+END_SRC

Which lets us do

#+BEGIN_SRC haskell
sample pairGenIntString
sample (pairGen :: Gen (Pair Int Float))
#+END_SRC

** Greater than the sum of its parts

We can use ~Test.QuickCheck.Gen.oneof~ to choose between options in
sum types.

#+BEGIN_SRC haskell
import Test.QuickCheck.Gen (oneof)

data Sum a b = First a | Second b
  deriving (Eq, Show)

sumGenEqual :: (Arbitrary a, Arbitrary b) => Gen (Sum a b)
sumGenEqual = do
  a <- arbitrary
  b <- arbitrary
  oneof [return $ First a, return $ Second b]
#+END_SRC

But we can also weight their frequencies differently with ~frequency~:

#+BEGIN_SRC haskell
instance Arbitrary a => Arbitrary (Maybe a) where
  arbitrary = frequency [(1, return Nothing), (3, liftM Just arbitrary)]
#+END_SRC

The above produces ~Just a~ values three times more often than
~Nothing~ values.

** CoArbitrary

- coarbitrary :: counterpart to Arbitrary that enable generating
                 functions fitting a particular type.

- Coarbitrary lets you vary a ~Gen~

#+BEGIN_SRC haskell
{-# LANGUAGE DeriveGeneric #-}

module CoArbitrary where

import GHC.Generics
import Test.QuickCheck

data Bool' = True' | False' deriving (Generic)

instance CoArbitrary Bool'

trueGen :: Gen Int
trueGen = coarbitrary True' arbitrary

falseGen :: Gen Int
falseGen = coarbitrary False' arbitrary
#+END_SRC

* 14.7 Chapter Excercises

see exercises.org

* 14.8 Definitions

- unit testing :: a testing method where you test the smallest parts
                  of an application possible.

- property testing :: a testing method where a subset of a large input
     space is validated against a law the code should abide by.

- idempotence :: a property of operations or fucntions where multiple
                 applications return the same result.

end 567

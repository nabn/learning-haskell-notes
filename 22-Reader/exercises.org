* Short Exercise: Warming Up

#+BEGIN_SRC haskell
import Data.Char

cap :: [Char] -> [Char]
cap xs = map toUpper xs

rev :: [Char] -> [Char]
rev xs = reverse xs
#+END_SRC

Compose these with ~(.)~ and ~fmap~. Their output should be identical.

#+BEGIN_SRC haskell
composed :: [Char] -> [Char]
composed = cap . rev

fmapped :: [Char] -> [Char]
fmapped = fmap cap rev
#+END_SRC

Now write a function to return the result of both ~cap~ and ~rev~ as a
tuple.

#+BEGIN_SRC haskell
tupled :: [Char] -> ([Char], [Char])
tupled = liftA2 (,) rev cap
#+END_SRC

* Ask

Implement the following function:

#+BEGIN_SRC haskell
ask :: Reader a a
ask = Reader id
#+END_SRC

* Reading Comprehension

1. Write ~liftA2~ yourself.

#+BEGIN_SRC haskell
myLiftA2 :: Applicative f => (a -> b -> c) -> f a -> f b -> f c
myLiftA2 f x y = (pure f) <*> x <*> y
#+END_SRC

2. Write the following function

#+BEGIN_SRC haskell
asks :: (r -> a) -> Reader r a
asks f = Reader f
#+END_SRC

3. Implement the Applicative for Reader

#+BEGIN_SRC haskell
instance Applicative (Reader r) where
  pure a = Reader (\x y -> y)
  (Reader rab) <*> (Reader ra) = Reader $ \r -> rab r (ra r)
#+END_SRC

* Reader Monad

1. Implmemnt the Reader Monad

#+BEGIN_SRC haskell
instance Monad (Reader r) where
  return = pure
  -- (>>=) :: Reader r a -> (a -> Reader r b) -> Reader r b
  (Reader ra) >>= aRb = Reader $ \r -> ???
#+END_SRC

* Chapter Exercises

** A warm-up stretch

see ~Sandbox/src/exercises/22-readerPractice.hs~

* 26.1 Monad Transformers

Monad transformers are important in a lot of everyday haskell
code. Even if you know how they work, managing a stack of transformers
can be tricky.

In this chapter we'll

- Work through more monad transformer types and instances
- Look at the ordering and wrapping of monad transformer stacks
- lift, lift, lift and lift some more

* 26.2 MaybeT

The ~Maybe~ monad can be extremely useful, ~MaybeT~ is an important
variant.

We can start by writing the newtype and the functor instance:

#+BEGIN_SRC haskell
newtype MaybeT m a = MaybeT { runMaybe :: m (Maybe a) }

instance (Functor m) => Functor (MaybeT m) where
  fmap f (MaybeT ma) = MaybeT $ (fmap . fmap) f ma
#+END_SRC

The applicative instance is a bit harder to follow, and it's worth
referencing the example in ~25-Composing-Types/exercises.org~.

#+BEGIN_SRC haskell
{-# LANGUAGE InstanceSigs #-}

instance (Applicative m) => Applicative (MaybeT m) where
  pure x = MaybeT (pure $ pure x)

  (<*>) :: (MaybeT m (a -> b)) -> (MaybeT m a) -> (MaybeT m b)
  (MaybeT mmab) <*> (MaybeT mma) = MaybeT $ (<*>) <$> mmab <*> mma
#+END_SRC

Note how, like with the ~Compose~ instance, we're fmaping ~<*>~ in to
use the polymorhpic applicative's ~<*>~ as the function for the second
~<*>~.

With all this, we could do something like the following:

    : λ> data Two a b = Two a b deriving Show
    : λ> runMaybe $ Two <$> MaybeT [Just 1, Nothing] <*> MaybeT [Just 2, Just 3]
    : [Just (Two 1 2), Nothing]

** MaybeT Monad instance

#+BEGIN_SRC haskell
instance (Monad m) => Monad (MaybeT m) where
  return = pure
  (>>=) :: MaybeT m a -> (a -> MaybeT m b) -> MaybeT m b

  MaybeT $ do
    v <- ma
    case v of
      Nothing -> return Nothing
      Just y -> runMaybeT (f y)
#+END_SRC

I understand how this is valid, but I have no idea how to use it yet.

* 26.3 EitherT

This is left as an exercise. See ~exercises.org~.

* 26.4 ReaderT

We see ~ReaderT~ much more often than ~Reader~ in common haskell.

#+BEGIN_SRC haskell
newtype ReaderT r m a = ReaderT { runReaderT :: r -> m a }
#+END_SRC

Here are the variaous instances for ~ReaderT~. The functor instance is
defined as:

#+BEGIN_SRC haskell
instance (Functor m) => Functor (ReaderT r m) where
  fmpa f (ReaderT rma) = ReaderT $ (fmap . fmap) f rma
#+END_SRC

The applicative is:

#+BEGIN_SRC haskell
instance (Applicatie m) => Applicatie (ReaderT r m) where
  pure a = ReaderT (pure (pure a))

  (ReaderT fmab) <*> (ReaderT rma) =
    ReaderT $ (<*>) <$> fmab <*> rma
#+END_SRC

The monad is

#+BEGIN_SRC haskell
instance (Monad m) => Monad (ReaderT r m) where
  return = pure
  (ReaderT rma) >>= f = ReaderT $ \r -> do
    a <- rma r
    runReaderT (f a) r
#+END_SRC

From here, there's no discussion of use.

* 26.5 StateT

~StateT~ is ~State~, but with additional monad structure wrapped
around the result. This is the newtype for ~StateT~:

#+BEGIN_SRC haskell
newtype StateT s m a = StateT { runStateT :: s -> m (a, s) }
#+END_SRC

The rest of the implementations are left as an exercise.

* 26.6 Types you probably don't want to use

Not every monad transformer will be performant or make sense. ~ListT~
and ~Writer/WriterT~ are examples of this.

** Why not use Writer or WriterT?

Writer or WriterT are often too lazy or too strict for the problem
you're trying to solve. In these cases, it will use more memory than
you'd like.

** The ListT you want isn't made from the List type

The obvious implementation of ~ListT~ isn't recommended:

1. Most first attempts won't pass the associativity law.
2. It's not very fast
3. Streaming libraries like ~pipes~ and ~conduit~ are better for most
   use cases.

Lists in Haskell are as much a control structure as a data structure
so streaming libraries such as pipes are usually fine.

* 26.7 Recovering an ordinary type from a transformer

- You have a transformer
- You want a non-transformer of that type
- --> you need some monadic structure that doesn't do anything
- --> you need the ~Identity~ monad

#+BEGIN_SRC haskell
type MyIdentity a = IdentityT Identity a
type Maybe a      = MaybeT    Identity a
type Either e a   = EitherT e Identity a
type Reader r a   = ReaderT r Identity a
type State s a    = StateT s  Identity a
#+END_SRC

** The ~transformers~ library

In general, you don't need to hand roll monad transformers. The
~transformers~ library contains a bunch of implementations and comes
with GHC.

Note: In ~transformers~ the ~EitherT~ implementaiton is called
~ExceptT~.

* 26.8 Lexically inner is structurally outer

I don't understand this at all.

* 26.9 MonadTrans

We often want to lift functions into a larger context.

#+BEGIN_SRC haskell
fmap  :: Functor f     => (a -> b) -> f a -> f b
liftA :: Applicative f => (a -> b) -> f a -> f b
liftM :: Monad m       => (a -> r) => m a -> m r
#+END_SRC

The ~MonadTrans~ typeclass lets us do some other lifting thing I don't
understand.

#+BEGIN_SRC haskell
class MonadTrans t where
  lift :: (Monad m) => m a -> t m a
#+END_SRC

** Motivating MonadTrans

Scotty is a web framework for Haskell.

* 26.10 MonadIO aka zoom-zoom
* 26.11 Monad transformers in use
* 26.12 Monads do not commute
* 26.13 Transform if you want to
* 26.14 Chapter Exercises
* 26.15 Follow-up resources

end 1025

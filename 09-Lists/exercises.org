* EnumFromTo

Write your own enumFromTo definitions for the types provided. Do not
use range syntax to do so. It should return the same results as if you
did [start..stop].

#+BEGIN_SRC haskell
eftBool :: Bool -> Bool -> [Bool]
eftBool = undefined

eftOrd :: Ordering -> Ordering -> [Ordering]
eftOrd = undefined

eftInt :: Int -> Int -> [Int]
eftInt = undefined

eftChar :: Char -> Char -> [Char]
eftChar = undefined
#+END_SRC

For solutions see enum_from_to.hs


* Thy Fearful Symmetry

1. Using ~takeWhile~ and ~dropWhile~, write a function that takes a
   string and returns a list of strings, using spaces to separate the
   elements of the string into words, as in the following sample:

    : Main> myWords "all i wanna do is have some fun"
    : ["all", "i", "wanna", "do", "is", "have", "some", "fun"]


see listify.hs for the solution

2. Next write a function that takes a string and returns a list of
   strings, using newline separators to break up the string as in the
   attached.

See listify_newlines.hs for the solution

3. Now let's look at what those two functions have in common. Try
   writing a new function that parameterizes the charcter you're
   breaking the string argument on and rewrite ~myWords~ and ~myLines~
   using it.

# TODO

* Comprehend Thy Lists

Take a look at the following functions, figure what you think the
output lists will be, and then run them in your REPL to verify (note
that you will need the ~mySqr~ list from above in scope to do this):

#+BEGIN_SRC haskell
mySqr = [x^2 | x <- [1..5]]
#+END_SRC



#+BEGIN_SRC haskell
[x | x <- mySqr, rem x 2 == 0] -- 1
-- [4, 16]

[(x,y) | x <- mySqr, y <- mySqr, x < 50, y > 50] -- 2
-- []

take 5 [(x, y) | x <- mySqr, y <- mySqr, x < 50, y > 50] --3
-- []
#+END_SRC


* Square Cube

Given the following:

#+BEGIN_SRC haskell
mySqr = [x^2 | x <- [1..5]]
myCube = [y^3 | y <- [1..5]]
#+END_SRC

1. First write an expression that will make tuples of the outputs of
   ~mySqr~ and ~myCube~.

#+BEGIN_SRC haskell
[(sq, cb) | sq <- mySqr, cb <- myCube]
#+END_SRC

2. Now alter that expression so that it only uses the ~x~ and ~y~
   values that are less than 50.

#+BEGIN_SRC haskell
[(sq, cb) | sq <- mySqr, cb <- myCube, x < 50, y < 50]
#+END_SRC

3. Apply another function to that list comprehension to determine how
   many tuples inhabit your output list.

#+BEGIN_SRC haskell
length [(sq, cb) | sq <- mySqr, cb <- myCube, x < 50, y < 50]
#+END_SRC


* Bottom Madness

** Will it blow up?

Will the following expression return a value or be ~bottom~?

#+BEGIN_SRC haskell
[x^y | x <- [1..5], y <- [2, undefined]]          -- 1
take 1 $ [x^y | x <- [1..5], y <- [2, undefined]] -- 2
sum [1, undefined, 3]                             -- 3
length [1, 2, undefined]                          -- 4
length $ [1, 2, 3] ++ undefined                   -- 5
take 1 $ filter even [1, 2, 3, undefined]         -- 6
take 1 $ filter even [1, 3, undefined]            -- 7
take 1 $ filter odd [1, 3, undefined]             -- 8
take 2 $ filter odd [1, 3, undefined]             -- 9
take 3 $ filter odd [1, 3, undefined]             -- 10
#+END_SRC

1. bottom
2. value
3. bottom
4. value
5. bottom
6. value
7. bottom
8. value
9. value
10. bottom

** Intermission: Is it in normal form?

For each expression below, determine whether it's in

- Normal form, which implies weak head normal form
- Weak head normal form only
- neither

#+BEGIN_SRC haskell
[1, 2, 3, 4, 5]          -- 1
1 : 2 : 3 : 4 : _        -- 2
enumFromTo 1 10          -- 3
length [1, 2, 3, 4, 5]   -- 4
sum (enumFromTo 1 10)    -- 5
['a'..'m'] ++ ['n'..'z'] -- 6
(_, 'b')                 -- 7
#+END_SRC

1. Normal form
2. Weak Head Normal Form
3. Neither
4. Neither
5. Neither
6. Neither
7. Weak Head Normal Form

* More Bottoms

Will the following expressions return values or bottom?

#+BEGIN_SRC haskell
take 1 $ map (+1) [undefined, 2, 3] -- 1
take 1 $ map (+1) [1, undefined, 3] -- 2
take 2 $ map (+1) [1, undefined, 3] -- 3
#+END_SRC

1. bottom
2. value
3. bottom

4. What does the following function do? What is its type? Describe it
   in standard English and then test it out in the REPL to makes sure
   you were correct.

#+BEGIN_SRC haskell
itIsMystery xs = map (\x -> elem x "aeiou") xs
#+END_SRC

The ~itIsMystery~ function takes a string, and returns a list of
booleans, mapping vowels to True and consonents to false

5. What will be the result of the following functions:

#+BEGIN_SRC haskell
map (^2) [1..10]                          -- a
map minimum [[1..10], [10..20], [20..30]] -- b
map sum [[1..5], [1..5], [1..5]]          -- c

-- Answers
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100] -- a
[1, 10, 20]                            -- b
[15, 15, 15]                           -- c
#+END_SRC

* Filtering

1. Given the above, how might we write a filter function that would
   give us all the multiples of 3 out of a list from 1-30?

#+BEGIN_SRC haskell
only_3s = filter ((== 0) . (mod 3)) [1..30]
#+END_SRC

2. Recalling what we learned about function composition, how could we
   compose the above function with the length function to tell us how
   many multiples of 3 there are between 1 and 30?

#+BEGIN_SRC haskell
length  only_3s
#+END_SRC

3. Next we're going to work on removing all articles ('the', 'a', and
   'an') from sentences. You want to get something that works like
   this:

       : Prelude> myFilter "the brown dog was a goof"
       : ["brown", "dog", "was", "goof"]

   You may recall that earlier in this chapter we asked you to write a
   function that separates a string into a list of strings by
   separating them at spaces. That is a standard library function
   called ~words~. You may consider starting this exercise by using
   words (or your version of course)

#+BEGIN_SRC haskell
myFilter :: [Char] -> [[Char]]
myFilter s = [w | w <- (words s), not (elem w ["a", "an", "the"])]
#+END_SRC

* Zipping Exercises

1. Write your own version of zip and ensure it behaves the same as the
   original.

2. Do what you did for zip, but now for zipWith

3. Rewrite your zip in terms of the zipWith you wrote

All of these are answered in zipping.hs

* Chapter Exercises

TODO

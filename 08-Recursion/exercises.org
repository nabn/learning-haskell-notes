* Review of types

1. What is the type of ~[[True, False], [True, True], [False, True]]~

d) [ [Bool] ]

2. Which of the following has the same type as ~[[True, False], [True,
   True], [False, True]]~?

b) [[3 == 3], [6 > 5], [3 < 4]]

3. For the following function
#+BEGIN_SRC haskell
func :: [a] -> [a] -> [a]
func x y = x ++ y
#+END_SRC
which of the following is true?

d) all of the above


4. For the ~func~ code above, which is a valid application of func to
   both of its arguments?

b) func "Hello" "World"


* Reviewing curring

Given the following definitions tell us what value results from
further applications.

#+BEGIN_SRC haskell
cattyConny :: String -> String -> String
cattyConny x y = x ++ " mrow " ++ y

flippy = flip cattyConny

appedCatty = cattyConny "woops"
frappe = flippy "haha"
#+END_SRC

1. What is the value of ~appedCatty "whoohoo!"~? Try to determine the
   answer for yourself then test in the REPL

"woops mrow whoohoo!"

2. ~frappe "1"~

"1 mrow haha"

3. ~frappe (appedCatty "2")~

"woops mrow 2 mrow haha"

4. ~appedCatty (frappe "blue")

"woops mrow blue mrow haha"

5. ~cattyConny (frappe "pink") (cattyConny "green" (appedCatty "blue"))~

"pink mrow haha mrow green mrow woops mrow blue"

6. ~cattyConny (flippy "Pugs" "are") "awesome"~

"are mrow Pugs mrow awesome"

* Recursion

1. Write out the steps for reducing ~dividedBy 15 2~ to its final
   answer according to the Haskell code/

2. Write a function that recursively sum3s all numbers from 1 to n, n
   being the argument. So that if n was 5, you'd add 1 + 2 + 3 + 4 + 5
   to get 15. The type should be ~(Eq a, Num a) => a -> a~

#+BEGIN_SRC haskell
summation :: (Eq a, Num a) => a -> a
summation n = go n 0
  where go n count
         | n == 0    = count
         | otherwise = go (n - 1) (count + n)
#+END_SRC

For additional thoughts see summation.hs

3. Write a function that multiplies two integral numbers using
   recursive summation. The type should be
   ~(Integral a) => a -> a -> a~

#+BEGIN_SRC haskell
myMul :: (Integral a) => a -> a -> a
myMul x y = go x y 0
  where
    go x y acc
      | y == 0    = acc
      | otherwise = go x (y - 1) (x + acc)
#+END_SRC

* Fixing dividedBy

* McCarthy 91 function

The McCarthy 91 function yields x - 10 when x > 100 and 91
otherwise. The function is recursive

MC(n) = {
   n - 10           if n > 100
   MC(MC(N + 11))   if n <= 100
}

#+BEGIN_SRC haskell
mc91 :: (Integral a) => a -> a
mc91 x
  | x > 100  = x - 10
  | x <= 100 = (mc91 (mc91 (x + 11)))
#+END_SRC

* Numbers into words

see wordnumber.hs

* Library Functions

Implement the functions in terms of ~foldMap~ or ~foldr~ from
Foldable, then try them out with multiple types that have ~Foldable~
instances.

#+BEGIN_SRC haskell
import Data.Monoid (Sum(..), Product(..), Any(..))

sum :: (Foldable t, Num a) => t a -> a
sum = getSum . (foldMap Sum)

product :: (Foldable t, Num a) => t a -> a
product = getProduct . (foldMap Product)

elem :: (Foldable t, Eq a) => a -> t a -> Bool
elem x = foldr (\y z -> x==y || z) False

elem :: (Foldable t, Eq a) => a -> t a -> Bool
elem x = foldr ((||) . (==x)) False

elem :: (Foldable t, Eq a) => a -> t a -> Bool
elem x = getAny . (foldMap (Any . (== x)))

minimum :: (Foldable t, Ord a) => t a -> Maybe a
minimum xs
  | (foldr (\x y -> False) True xs) = Nothing
  | otherwise = foldr maybeMin Nothing xs
  where maybeMin x Nothing  = Just x
        maybeMin x (Just y) = Just (min x y)

maximum :: (Foldable t, Ord a) => t a -> Maybe a
maximum xs
  | (foldr (\x y -> False) True xs) = Nothing
  | otherwise = foldr (\x y -> max (Just x) y) Nothing xs

null :: (Foldable t) => t a -> Bool
null = foldr (\x y -> False) True

length :: (Foldable t) => t a -> Int
length = foldr (\x y -> y + 1) 0

toList :: (Foldable t) => t a -> [a]
toList = foldr (:) []

fold :: (Foldable t, Monoid m) => t m -> m
fold = foldMap id

foldMap :: (Foldable t, Monoid m) => (a -> m) -> t a -> m
foldMap = foldr mappend mempty

#+END_SRC

* Chapter Exercises

Write Foldable instances for the following datatypes.

1.

#+BEGIN_SRC haskell
data Constant a b = Constant a deriving Show

instance Foldable (Constant a) where
   foldr _ z _ = z
#+END_SRC

2.

#+BEGIN_SRC haskell
data Two a b = Two a b deriving Show

instance Foldable (Two a) where
    foldr f z (Two x y) = (f y z)
#+END_SRC

** Thinking Cap

Write a filter function for ~Foldable~ types using ~foldMap~.

#+BEGIN_SRC haskell
filterF :: (Applicative f, Foldable t, Monoid (f a))
        => (a -> Bool) -> t a -> f a
filterF = undefined
#+END_SRC

I'm not sure how to approach this. I have a couple thoughts, and a
couple questions.

Questions first:
  - In the type constraint for the output, I'm allowed/expected to
    return some Monoid. However, am I supposed to return a particular
    Monoid?

Thoughts
  - Jesse said he got this working, but had to give it an expected
    type. Does that mean it's using mempty somewhere
  - I probably have to use ~pure~ from Applicative to get my
    applicative instance out of nowhere. Also from the type signature?
  - Map false onto mempty, and true onto pure?

*** After talking with Jesse, and talking it over

We came up with a solution:

#+BEGIN_SRC haskell
  filterF :: (Applicative f, Foldable t, Monoid (f a))
          => (a -> Bool) -> t a -> f a
  filterF f = foldMap monoidFilter
    where monoidFilter x =
            case f x of
              True  -> pure x
              False -> mempty
#+END_SRC

* Parsing Practice

1. There's a combinator that will let us mark that we expect an input
   stream to be "finished" at a particular point in our parser. In the
   ~parsers~ library this is simply called ~eof~ (end of file) and is
   in the ~Text.Parser.Combinators~ module.

   See if you can make the ~one~ and ~oneTwo~ parsers fail because
   they didn't exhaust the input stream.

Answer:

The following code requires that the rest of
~Sandbox/src/chpt-24-notes/learnParsers.hs~ is loaded in order to
work.

#+BEGIN_SRC haskell
import Text.Parser.Combinators

one'' = one >> eof

oneTwo'' = oneTwo >> eof
#+END_SRC

Use this like:

    : parseString one'' mempty "12"

2. Use ~string~ to make a Parser that parses "1", "12", and "123" out
   of the example input respectively. Try combining it with ~stop~
   too. That is, a single parser should be able to parse all three of
   those strings.

3. Try writing a Parser that does what string does, but using ~char~.

* Unit of Success

1. Write a parser that consumes "123" and eof, and returns "Success
   123" instead of "Success ()".

#+BEGIN_SRC haskell
import Text.Trifecta

parse123 :: Parser String
parse123 = do
  val <- string "123"
  eof
  return val
#+END_SRC

    : parseString parse123 mempty "123"

* Try Try

1. Make a parser using the existing fraction parser plus a new decimal
   parser, that can parse either decimals or fractions.

See ~Sandbox/src/exercises/24-fractionDecimal.hs~.
* Chapter Exercises

1. Write a parser for semantic versions as defined by
   [[http:semver.org][Semver.org]]. After making a working parser, write an Ord instance
   for the ~SemVer~ type that obeys the specification outline on the
   ~SemVer~ website.

See ~Sandbox/src/exercises/24-semVer.hs~

2. Write a parser for positive integer values. Don't reuse the
   preexisting ~digit~ or ~integer~ functions, but you can use the
   rest of the libraries we've shown you so far.

3. Extend the parser you wrote to handle negative and positive
   integers. Try writing a new parser in terms of the one you already
   have to do this.

4. Write a parser for US/Canda phone numbers with varying formats.

5. Write a parser for a log file format and sum the time spent in each
   activity. Additionally provide an alternative aggregation of the
   data the provides average time spent per pactivity per day.

   In support of this task, define a reasonable datatype for
   representing this data. As an extra task, make this bi-directional
   by making a Show representation for the datatype which matches the
   format you are parsing.

See ~Sandbox/src/exercises/24-logParser.hs~

6. Write a parser for IPv4 addresses. Represent the output as Word32
   (an unsigned 32 bit integer).

7. Write a parser for IPv6 addresses. Represent the output as a
   Word64.

8. Remove the derived Show instance from the IPAddress/IPAddress6
   types, write your own show instance for each type that renders in
   the typical textual format appropriate to each.

9. Write a function that conversts between IPAddress and IPAddress6.

10. Writea a parser for the DOT language that Graphviz uses to express
    graphs in plain-text.

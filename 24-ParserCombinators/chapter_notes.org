* 24.1 Parser combinators

The word "Parse" comes from the latin word for "parts." We'll be
breaking a language into its component parts in a structured way.

We'll be:

- accepting serialized input.
- turning that input into a value of a structured datatype.
- This will often look like a tree.

In this chapter we're focusing on using haskell's parsing libraries.

- Using a parsing library to cover the basics of parsing
- demonstrate the awesome power of parser combinators
- marshall and unmarshall some JSON data
- talk about tokenization

* 24.2 A few more words of introduction

We won't be looking too deeply into the types of the parsing libraries
we're using. Trying to focus from the outside in on only the things
that we'll need.

* 24.3 Understanding the parsing process

- parser :: A function that takes some textual input and returns some
            structure as an output.
  - Parsers analyze structure in conformance with rules specified in a
    grammar
- parser combinator :: A higher order function that takes parsers as
     input and returns a new parser as output.
- Combinator :: an expression with no free variables

** Since we didn't use an analogy for Monad

We'll run through some code that demonstrates the idea of
parsing. We'll be using the ~trifecta~ library.

The source for this can be found in:

    : Sandbox/src/chpt-24-notes/learnParsers.hs

*** What's the purpose of this demonstration?

Think of parsing as moving a cursor around a linear stream of
text. Think of the individual units within the stream as characters or
ideographs.

As we move, we'll be assembling chunks. If we successfully assemble a
new chunk, we can move on. Otherwise we can throw an error.

*** Notes on the code

We're using the monadic sequence operator ~>>~ to combine parsers.

The definition of a parser type looks a lot like ~State~.

#+BEGIN_SRC haskell
type Parser a = String -> Maybe (a, String)
#+END_SRC

Read this as:

1. Await a string value
2. Produce a result which may succeed or not
3. Return the tuple of the value you wanted and what's left

We can use the parsers we write in ~learnParsers.hs~ as follows:

    : parseString one' mempty "123"

** Intermission: parsing free jazz

Some examples of using ~char~ and ~string~ with ~parseString~

* 24.4 Parsing fractions

See ~Sandbox/src/chpt-24-notes/parseFractions.hs~.

* 24.5 Haskell's parsing ecosystem

Several libraries exist for parsing in Haskell
  - parsec
  - attoparsec
  - megaparsec
  - aeson
  - cassava
  - trifecta

We're using trifecta because it it stable. It's API is split between
two libraries, ~parsers~ and ~trifecta~.

** Typeclasses of Parsers

These typeclasses come from the ~parsers~ library.

* 24.6 Alternative

In ~Control.Applicative~ there is a typeclass ~Alternative~ with two
required functions for a minimal definition:
  - ~empty~
  - ~<|>~

You can think of ~<|>~ as a binary associative operator representing a
choice, and ~empty~ as its identity value. For a thorough treatment
see [[https://wiki.haskell.org/Typeclassopedia#Failure_and_choice:_Alternative.2C_MonadPlus.2C_ArrowPlus][Typclassopedia's entry on Alternative]].

The ~Parsing~ typeclass in Trifecta has ~Alternative~ as a superclass,
so all parsers have ~Alternative~ instances.

#+BEGIN_SRC haskell
import Control.Applicative
import Text.Trifecta

type NumberOrString = Either Integer String

parseNos :: ParserNumberOrString
parseNos =
      (Left <$> integer)
  <|> (Right <$> some letter)
#+END_SRC

Using the alternative will parse both of the following:

    : parseString parseNos mempty "123Blah123"
    : parseString parseNos mempty "Blah123Blah"

As ~Success (Right 123)~ and ~Success (Left "Blah")~ respectively.


* 24.7 Parsing configuration files

We'll be parsing the INI configuration file format. It looks something
like this:

#+BEGIN_SRC ini
; comment
[section]
host=wikipedia.org
alias=claw
#+END_SRC

The code for this parser will be in
~Sandbox/src/chpt-24-notes/iniParser.hs~.

We'll be trying to break the problem into smaller parsing tasks, and
then compose those smaller parts into the final parser.

We'll also be using the monadic operators ~<*~ and ~*>~ to do parser
evaluation but discard parts of the results.

* 24.8 Character and token parsers

Traditionally parsing is done in two steps: Lexing and parsing.

- lexer :: somtimes called tokenizers, perform simpler parsing, that
           does not require looking very ahead into the input stream.

Look at the difference between these:

    : parseString (some (some digit)) mempty "123 456"
    : parseString (some integer) mempty "123 456"

In the above, ~integer~ is a tokenizer. We can create our own
tokenizing parser:

#+BEGIN_SRC haskell
p' :: Parser [Integer]
p' = some $ do
  i <- token (some digit)
  return (read i)
#+END_SRC

* 24.9 Polymorphic parsers

If we take the time to write polymorphic types for our parsers we can
get parsers that can be run using ~attoparsec~, ~trifecta~, ~parsec~
or anything else that has implemented the necessary typeclasess.

See ~Sandbox/src/chpt-24-notes/polymorphicParse.hs~ for the
implementation.

** Failure and backtracking

Parsers have the option, when a parse fails, to backtrack the "cursor"
to where it was before that step of parsing started. See
~Sandbox/src/chpt-24-notes/backtracking.hs~ for example code.

Note, we can annotate backtracking parsers with the ~<?>~ operator to
add information to parse rules.

#+BEGIN_SRC haskell
tryAnnot :: (Monad f, CharParsing f) => f Char
tryAnnot =
      (try (char '1' >> char '2') <?> "Tried 12")
  <|> (char '3' <?> "Tried 3")
#+END_SRC

In backtracking.hs, doing this does make it clear how much better
Trifecta's error messages are.

* 24.10 Marshalling from an AST to a datatype

Parsing is a way of narrowing down some textual input into something
specific. Marshalling narrows down this input even further into an
object with domain specific meaning. By contrast, there's also
unmarshalling and serialization.

The two direcions of the pipeline could be drawn as follows. Parse and
unmarshall:

    : Text -> Structure -> Meaning

Marshall and serialize:

    : Meaning -> Structure -> Text


** Marshalling and unmarshalling JSON data.

The most popular haskell library for JSON is ~aeson~. There is no
built in unmarshall/marshall step.

The code for this example will be in
~Sandbox/src/chpt-24-notes/marshall.hs~.

Note, that given some json in a string, we can already decode it into
a simple value type, if we specify the type we want out:

    : λ> decode someJson :: Maybe Value

If we simply try to decode, we'll get nothing

    : λ> decode someJson
    : Nothing

* 24.11 Chapter Exercises
* 24.12 Definitions

- parser combinator :: combines two or more parsers to produce a new
     parser. Examples include ~<|>~, ~some~, ~many~, ~mappend~, and
     ~>>~.
- Marshalling :: transforming a potentially non-linear representation
                 of data in memory into a format that can be stored on
                 disk or transmitted over a network socket.
- Tokenizer :: Converts text, usually a stream of characters into a
               more meaningful, chunkier structure, such as words,
               sentences or symbols.
- Lexer :: See tokenizer.

* 24.13 Follow-up resources

948

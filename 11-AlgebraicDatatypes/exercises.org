* Dog Types

#+BEGIN_SRC haskell
data PugType = PugData
data HuskyType a = HuskyData
data DogueDeBordeaux doge = DogueDeBordeaux doge

data Doggies a =
    Husky a
  | Mastiff a
  deriving (Eq, Show)
#+END_SRC

Give the datatypes defined in the above sections:

1. Is ~Doggies~ a type constructor or a data constructor?

       Type Constructor

2. What is the kind of ~Doggies~?

       * -> *

3. What is the kind of ~Doggies String~?

       *

4. What is the type of ~Husky 10~

       Num a => Doggies a

5. What is the type of ~Husky (10 :: Integer)?

       Doggies Integer

6. What is the type of ~Mastiff "Scooby Doo"~?

       Doggies [Char]

7. Is ~DogeDeBordeaux~ a type constructor or a data constructor?

       Either/Both

8. What is the type of ~DogeDeBordeaux~?

       doge -> DogeDeBordeaux doge

9. What is the type of ~DogeDeBordeaux "doggie!"~

       DogeDeBordeaux [Char]

* Vehicles

see vehicles.hs for code

1. What is the type of myCar

       Vehicle

2. Define the following functions

       see vehicles.hs

3. Now we're going to write a function to tell us the manufacturere of
   a piece of data

       see vehicles.hs

4. Given that we're returning the ~Manufacturer~, what will happen if
   you use this on ~Plane~ data?

       We'll get ~bottom~

5. All right. Let's say you've decided to add the size of the plane as
   an argument to the ~Plane~ constructor. Add that to your datatypes
   in the appropriate places and change your data and functions
   appropriately.

       see vehicles.hs
* Cardinality

While we haven't explicitly describe the rules for cacluating the
cardinality of datatypes yet, you might already have an idea of how to
do it for simple datatypes with nullary constructors. Try not to
overthink these exercises -- follow your intuition based on what you
know:

#+BEGIN_SRC haskell
data PugType = PugData

data Airline =
    PapuAir
  | CatapultsR'Us
  | TakeYourChanceUnited
#+END_SRC

1. Cardinality of ~PugType~

        1

2. Cardinality of ~Airline~

        3

3. Give what we know about ~Int8~ what's the cardinality of Int16?

       65536

4. Use the REPL and ~maxBound~ and ~minBound~ to examine ~Int~ and ~Integer~

       Int: 2 ^ 64
       Integer: infinite

5. Extra credit (impress your friends!): What's the connection between
   the 8 in Int8 and the types cardinality of 256:

        256 = 2 ^ 8

* For Example

Note, I'm just writing the answers here. See for_example.hs for code

1. The type of ~MakeExample~ is ~Example~, asking for the type of
   ~Example~ results in a "not in scope" error

2. You get info about it, and can see it derives ~Show~

3. You get a function ~Int -> Example~

* Logic Goats

Note: all answers are in logic_goats.hs

* Pity the Bool

1. Given the datatype

#+BEGIN_SRC haskell
data BigSmall =
    Big Bool
  | Small Bool
  deriving (Eq, Show)
#+END_SRC

What is the cardinality of datatype?

Answer: 4

2. Given a datatype

#+BEGIN_SRC haskell
import Data.Int

data NumberOrBool =
    Numba Int8
  | BollyBool Bool
  deriving (Eq, Show)
#+END_SRC

What is the cardinality of ~NumberOrBool~? What happens if you try to
create a ~Numba~ with a numeric literal larger than 127? And smaller
than (-128)?

Answers:
  - 256 + 2 = 258
  - It overflows (and warns you that it happened)
  - It reverse overflows (and warns you that it happened)

* How does your garden grow?

1. Given the type

#+BEGIN_SRC haskell
data FlowerType = Gardenia
                | Daisy
                | Rose
                | Lilac
                deriving Show

type Gardener = String

data Garden =
  Garden Gardener FlowerType
  deriving Show
#+END_SRC

What is the normal form of ~Garden~

Answer:

#+BEGIN_SRC haskell
data Garden =
  Gardenia Gardener
  Daisy Gardener
  Rose Gardener
  Lilac Gardener
  deriving Show
#+END_SRC

* Programmers

See programmers.hs for code

* The Quad

Determine how many unique inhabitants each type has.

#+BEGIN_SRC haskell
-- setup
data Quad = One | Two | Three | Four deriving (Eq, Show)


eQuad :: Either Quad Quad -- 1
-- Answer: 4 + 4 = 8

prodQuad :: (Quad, Quad) -- 2
-- Answer: 4 * 4 = 16

funcQuad :: Quad -> Quad -- 3
-- Answer: 4 ^ 4 = 256

prodTBool (Bool, Bool, Bool) -- 4
-- Answer: 2 * 2 * 2 = 8

gTwo :: Bool -> Bool -> Bool -- 5
-- Answer: 2 ^ 2 ^ 2 = 16

fTwo :: Bool -> Quad -> Quad -- 6
-- Answer: 4 ^ (2 * 4) = 65536

#+END_SRC

* Write map for Binary Tree

Given the definition of ~BinaryTree~, write a map function for the
data structure.

For solution/code/tests see bin_tree.hs

* Convert Binary Trees to lists

Write functions to convert Binary Tree values to lists.

for solution/code/tests see bin_tree.hs

* Write foldr for BinaryTree

for solution/code/tests see bin_tree.hs

* Chapter Exercises

** Multiple Choice

Note, of the multiple choices, I'm only recording what I believe to be
the correct answer here.

1. Given the following datatype

#+BEGIN_SRC haskell
data Weekday = Monday | Tuesday | Wednesday | Thursday | Friday
#+END_SRC

(a) Weekday is a type with five data constructors

2. And with the same datatype definition in mind, what is the type of
   the following function ~f~?

#+BEGIN_SRC haskell
f Friday = "Miller Time"
#+END_SRC

(c) ~f :: Weekday -> String~

3. Types defined with the data keyword

(b) must begin with a capital letter

4. The function ~g xs = xs !! (length xs -1 )~

(c) delivers the final element of ~xs~

** Ciphers

We'll be writing a Vigenere cipher, a substitution cipher, using a
series of Caesar ciphers, determined by a keyword.

See ciphers.hs for a solution, and ciphers2.hs for a different
solution that tries to encode the encoding/decoding logic into simple
operations on a single type.

I'm not sure which I like more. When writing the original ciphers, I
felt like I was getting lost in the logic of converting to and from
characters. I wanted to do a conversion to a type that encoded the
operation of "cipherifying" more clearly, so that the operations would
seems more straightforward.

This ended up adding a fair amount of code, but possbily makes it
clearer where there are errors.

I am proud of the "point-free" style funcitons I wrote in the original
ciphers. When I write these I feel like I'm encoding some real higher
order operation, which is cool.

I do wonder about the library creation aspect of it. When writing
these higher order operations, I have a feeling that I'm revealing
some "truth" about the problem, which is exciting, but perhaps leads
me down a route of unnecessary abstraction. It's very intersting.

This is the first real, undirected haskell program that I've
written. I'm excitted to learn more.

** As-patterns

Use as-patterns in implementing the following functions:

1. This should return ~True~ if and only if all the values in the
   first list appear in the second list, though they need not be
   contiguous

#+BEGIN_SRC haskell
isSubsequenceOf :: (Eq a) => [a] -> [a] -> Bool
isSubsequenceOf [] _ = True
isSubsequenceOf _ [] = False
isSubsequenceOf sub@(x:xs) seq@(y:ys)
  | x == y = isSubsequenceOf xs seq
  | isSubsequenceOf sub ys = isSubsequenceOf xs seq
  | otherwise = False
#+END_SRC

2. Split a sentence into words, then tuple each word with the
   capitalized form of each

#+BEGIN_SRC haskell
capitalizeWords :: String -> [(String, String)]
capitalizeWords = (map capitalizePair) . words
  where capitalizePair w@(c:cs) = (w, (toUpper c):cs)
#+END_SRC

** Language exercises

1. Write a function that capitalizes a words

#+BEGIN_SRC haskell
capitalizeWord :: String -> String
capitalizeWord (c:cs) = (toUpper c):cs
#+END_SRC

2. Write a function that capitalizes sentences in a
   paragraph. Recognize when a new sentence has begun by checking for
   periods.

see capitalizeParagraph.hs for a solution

** Phone exercise

see phone.hs for a solution
